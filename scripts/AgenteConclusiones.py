import json
import os
from langchain_groq import ChatGroq
from langchain_core.prompts import PromptTemplate
from langchain.chains import LLMChain

# === CONFIGURACI칍N === #
GROQ_API_KEY = os.getenv("GROQ_API_KEY", "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")

def leer_outputs():
    # Puedes tambi칠n hacer un requests.get a tu bin si prefieres, aqu칤 es local
    with open("outputs.json", "r", encoding="utf-8") as f:
        data = json.load(f)
    context = "\n\n".join([
        f"INTRODUCCI칍N:\n{data.get('introduccion', '')}",
        f"CONCEPTOS CLAVE:\n{data.get('conceptos_clave', '')}",
        f"ENSAYO:\n{data.get('ensayo', '')}",
        f"TEMAS:\n{data.get('temas', '')}"
    ])
    return context

conclusiones_prompt = PromptTemplate(
    input_variables=["contexto"],
    template=(
        "Act칰a como un experto en docencia universitaria y redacci칩n acad칠mica. "
        "A continuaci칩n tienes el desarrollo completo de una unidad tem치tica, con introducci칩n, conceptos clave, ensayo y tem치ticas abordadas:\n\n"
        "{contexto}\n\n"
        "Con base en TODA la informaci칩n anterior, redacta 4 conclusiones profundas y extensas (cada una de al menos 11 l칤neas), "
        "resumidas en p치rrafos separados. Cada conclusi칩n debe analizar, sintetizar y reflexionar cr칤ticamente sobre los aportes, los retos y la relevancia de la unidad, "
        "los temas y los conceptos desarrollados, destacando c칩mo contribuyen a la formaci칩n profesional en el 치rea correspondiente. "
        "No repitas la introducci칩n ni el temario, enf칩cate en los aprendizajes, conexiones pr치cticas, desaf칤os, impacto actual y proyecci칩n futura. "
        "No escribas t칤tulos ni n칰meros, solo los 4 p치rrafos seguidos."
         "Todo el contenido debe ir en espa침ol"
    )
)

llm = ChatGroq(
    model_name="llama3-70b-8192",
    api_key=GROQ_API_KEY,
    temperature=0.3,
    max_tokens=2200
)

conclusiones_chain = LLMChain(llm=llm, prompt=conclusiones_prompt)

def generar_conclusiones():
    contexto = leer_outputs()
    print("\n游닇 Generando conclusiones integradoras para la unidad completa...\n")
    conclusiones = conclusiones_chain.run(contexto=contexto)
    print("\n=== CONCLUSIONES GENERADAS POR LA IA ===\n")
    print(conclusiones)
    with open("output_AgenteConclusiones.txt", "w", encoding="utf-8") as f:
        f.write(conclusiones)

if __name__ == "__main__":
    generar_conclusiones()
